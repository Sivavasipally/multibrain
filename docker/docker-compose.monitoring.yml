# Enhanced Docker Compose for RAG Chatbot PWA with comprehensive monitoring
# Extends production setup with additional monitoring and observability tools

version: '3.8'

services:
  # Extend base production services
  extends:
    file: docker-compose.prod.yml
    service: backend
  
  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ragchatbot-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: ragchatbot-cadvisor
    ports:
      - "9080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: ragchatbot-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://raguser:${POSTGRES_PASSWORD}@postgres:5432/ragchatbot?sslmode=disable
    depends_on:
      - postgres
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter
    container_name: ragchatbot-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ragchatbot-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ragchatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: ragchatbot-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ragchatbot-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ragchatbot-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Alertmanager for alert handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ragchatbot-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Blackbox exporter for endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: ragchatbot-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - ragchatbot-network
    restart: unless-stopped

  # Uptime monitoring service (custom)
  uptime-monitor:
    build:
      context: ./monitoring/uptime-monitor
      dockerfile: Dockerfile
    container_name: ragchatbot-uptime-monitor
    environment:
      - MONITOR_ENDPOINTS=http://nginx/health,http://backend:5000/health
      - CHECK_INTERVAL=60
      - ALERT_WEBHOOK=${UPTIME_ALERT_WEBHOOK}
    depends_on:
      - backend
      - nginx
    networks:
      - ragchatbot-network
    restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  ragchatbot-network:
    external: true